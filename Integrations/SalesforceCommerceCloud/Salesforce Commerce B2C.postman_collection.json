{
	"info": {
		"_postman_id": "9df8f049-77af-44c8-949d-d5488b4a307e",
		"name": "Salesforce Commerce B2C",
		"description": "# Salesforce Commerce APIs\n\n## SCAPI End2End Shopper Journey\n\nA set of API endpoint calls from all different commerce B2C API domains. Serves as a sample set of call for a shopper journey and is connected to a commerce B2C trial environment.\n\n## Shopper Login and API Access Service (SLAS)\n\nThis Postman collection contains 6 use cases that SLAS supports. This collection will show how to get an authorization code, access token, create a shopper basket, place an item in the basket, and then delete the basket using a private SLAS client and a SLAS public client.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24575039"
	},
	"item": [
		{
			"name": "Salesforce Commerce API families",
			"item": [
				{
					"name": "SLAS Admin",
					"item": [
						{
							"name": "OAuth token from account manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var data = JSON.parse(responseBody);",
											"pm.collectionVariables.set(\"AUTHORIZATION\", \"Bearer \" + data.access_token);",
											"",
											"if(responseCode.code !== 200) {",
											"    console.log(responseBody);",
											"} "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{admin_client_id}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{admin_client_secret}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "SALESFORCE_COMMERCE_API:bbsv_150",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://account.demandware.com/dwsso/oauth2/access_token",
									"protocol": "https",
									"host": [
										"account",
										"demandware",
										"com"
									],
									"path": [
										"dwsso",
										"oauth2",
										"access_token"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - create/update tenant",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"instance\": \"{{tenant}}\",\n    \"description\": \"Tenant for API Access\",\n    \"merchantName\": \"{{tenantMerchantName}}\",\n    \"contact\": \"{{tenantContact}}\",\n    \"emailAddress\": \"{{tenantEmail}}\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - retrieve tenant",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - create/update public client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}",
											"",
											"let clientId = pm.collectionVariables.get(\"public_client_id\")",
											"",
											"// if client is not defined, create a UUID",
											"if (!clientId) {",
											"    console.log('creating public_client_id')",
											"    clientId = uuidv4();",
											"}",
											"",
											"if (clientId) {",
											"    console.log(`setting public_client_id: ${clientId}`)",
											"    pm.collectionVariables.set(\"public_client_id\", clientId);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientId\": \"{{public_client_id}}\",\n    \"name\": \"Public Client\",\n    \"isPrivateClient\": \"false\",\n    \"channels\": [\n        \"RefArch\",\n        \"RefArchGlobal\"\n    ],\n    \"scopes\": [\n        \"sfcc.shopper-baskets-orders\",\n        \"sfcc.shopper-baskets-orders.rw\",\n        \"sfcc.shopper-categories\",\n        \"sfcc.shopper-context.rw\",\n        \"sfcc.shopper-customers.login\",\n        \"sfcc.shopper-customers.register\",\n        \"sfcc.shopper-discovery-search\",\n        \"sfcc.shopper-experience\",\n        \"sfcc.shopper-gift-certificates\",\n        \"sfcc.shopper-myaccount\",\n        \"sfcc.shopper-myaccount.addresses\",\n        \"sfcc.shopper-myaccount.addresses.rw\",\n        \"sfcc.shopper-myaccount.baskets\",\n        \"sfcc.shopper-myaccount.orders\",\n        \"sfcc.shopper-myaccount.paymentinstruments\",\n        \"sfcc.shopper-myaccount.paymentinstruments.rw\",\n        \"sfcc.shopper-myaccount.productlists\",\n        \"sfcc.shopper-myaccount.productlists.rw\",\n        \"sfcc.shopper-myaccount.rw\",\n        \"sfcc.shopper-product-search\",\n        \"sfcc.shopper-productlists\",\n        \"sfcc.shopper-products\",\n        \"sfcc.shopper-promotions\",\n        \"sfcc.shopper.stores\",\n        \"sfcc.pwdless_login\",\n        \"sfcc.session_bridge\"\n    ],\n    \"redirectUri\": [\n        \"http://127.0.0.1:3000/callback\",\n        \"http://localhost:3000/callback\",\n        \"https://*.mobify-storefront.com/callback\",\n        \"{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/SLASCallback-RetrieveCode\"\n    ],\n    \"callbackUri\": []\n}"
								},
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}/clients/{{public_client_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}",
										"clients",
										"{{public_client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - create/update private client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}",
											"",
											"let clientId = pm.collectionVariables.get(\"private_client_id\")",
											"",
											"// if client is not defined, create a UUID",
											"if (!clientId) {",
											"    console.log('creating private_client_id')",
											"    clientId = uuidv4();",
											"}",
											"",
											"if (clientId) {",
											"    console.log(`setting private_client_id: ${clientId}`)",
											"    pm.collectionVariables.set(\"private_client_id\", clientId);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clientId\": \"{{private_client_id}}\",\n    \"secret\": \"{{private_client_secret}}\",\n    \"name\": \"Private Client\",\n    \"isPrivateClient\": \"true\",\n    \"channels\": [\n        \"RefArch\",\n        \"RefArchGlobal\"\n    ],\n    \"scopes\": [\n        \"sfcc.catalogs\",\n        \"sfcc.customerlists.rw\",\n        \"sfcc.orders.rw\",\n        \"sfcc.products.rw\",\n        \"sfcc.gift-certificates\",\n        \"sfcc.gift-certificates.rw\",\n        \"sfcc.shopper-baskets-orders\",\n        \"sfcc.shopper-baskets-orders.rw\",\n        \"sfcc.shopper-categories\",\n        \"sfcc.shopper-context.rw\",\n        \"sfcc.shopper-customers.login\",\n        \"sfcc.shopper-customers.register\",\n        \"sfcc.shopper-discovery-search\",\n        \"sfcc.shopper-gift-certificates\",\n        \"sfcc.shopper-myaccount\",\n        \"sfcc.shopper-myaccount.addresses\",\n        \"sfcc.shopper-myaccount.addresses.rw\",\n        \"sfcc.shopper-myaccount.baskets\",\n        \"sfcc.shopper-myaccount.orders\",\n        \"sfcc.shopper-myaccount.paymentinstruments\",\n        \"sfcc.shopper-myaccount.paymentinstruments.rw\",\n        \"sfcc.shopper-myaccount.productlists\",\n        \"sfcc.shopper-myaccount.productlists.rw\",\n        \"sfcc.shopper-myaccount.rw\",\n        \"sfcc.shopper-product-search\",\n        \"sfcc.shopper-productlists\",\n        \"sfcc.shopper-products\",\n        \"sfcc.shopper-promotions\",\n        \"sfcc.shopper.stores\",\n        \"sfcc.inventory.impex-event-log\",\n        \"sfcc.inventory.impex-graphs\",\n        \"sfcc.inventory.impex-graphs.rw\",\n        \"sfcc.inventory.impex-inventory.rw\",\n        \"sfcc.inventory.impex-inventory\",\n        \"sfcc.inventory.availability\",\n        \"sfcc.inventory.availability.rw\",\n        \"sfcc.inventory.reservations\",\n        \"sfcc.inventory.reservations.rw\",\n        \"sfcc.inventory.admin.rw\",\n        \"sfcc.pwdless_login\",\n        \"sfcc.session_bridge\",\n        \"sfcc.ts_ext_on_behalf_of\"\n    ],\n    \"redirectUri\": [\n        \"http://127.0.0.1:3000/callback\",\n        \"http://localhost:3000/callback\",\n        \"https://*.mobify-storefront.com/callback\",\n        \"{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/SLASCallback-RetrieveCode\"\n    ],\n    \"callbackUri\": [\n        \"{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/default/PasswordlessLogin-Callback\",\n        \"{{callback_url}}\"\n    ]\n}"
								},
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}/clients/{{private_client_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}",
										"clients",
										"{{private_client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - retrieve client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateCodeVerifier() {",
											"    return generateRandomString(96);",
											"}",
											"",
											"function generateRandomString(length) {",
											"    var text = \"\";",
											"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
											"    for (var i = 0; i < length; i++) {",
											"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
											"    }",
											"    return text;",
											"}",
											"",
											"function generateCodeChallenge(code_verifier) {",
											"    return CryptoJS.SHA256(code_verifier);",
											"}",
											"",
											"function base64URL(string) {",
											"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
											"}",
											"",
											"var verifier = base64URL(generateCodeVerifier());",
											"var challenge = base64URL(generateCodeChallenge(verifier));",
											"",
											"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
											"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}/clients/{{public_client_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}",
										"clients",
										"{{public_client_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - retrieve clients",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateCodeVerifier() {",
											"    return generateRandomString(96);",
											"}",
											"",
											"function generateRandomString(length) {",
											"    var text = \"\";",
											"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
											"    for (var i = 0; i < length; i++) {",
											"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
											"    }",
											"    return text;",
											"}",
											"",
											"function generateCodeChallenge(code_verifier) {",
											"    return CryptoJS.SHA256(code_verifier);",
											"}",
											"",
											"function base64URL(string) {",
											"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
											"}",
											"",
											"var verifier = base64URL(generateCodeVerifier());",
											"var challenge = base64URL(generateCodeChallenge(verifier));",
											"",
											"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
											"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}/clients",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "SLAS Admin - delete client",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function generateCodeVerifier() {",
											"    return generateRandomString(96);",
											"}",
											"",
											"function generateRandomString(length) {",
											"    var text = \"\";",
											"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
											"    for (var i = 0; i < length; i++) {",
											"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
											"    }",
											"    return text;",
											"}",
											"",
											"function generateCodeChallenge(code_verifier) {",
											"    return CryptoJS.SHA256(code_verifier);",
											"}",
											"",
											"function base64URL(string) {",
											"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
											"}",
											"",
											"var verifier = base64URL(generateCodeVerifier());",
											"var challenge = base64URL(generateCodeChallenge(verifier));",
											"",
											"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
											"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{AUTHORIZATION}}"
									}
								],
								"url": {
									"raw": "{{HOST}}/shopper/auth-admin/{{version}}/tenants/{{tenant}}/clients/{{public_client_id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"auth-admin",
										"{{version}}",
										"tenants",
										"{{tenant}}",
										"clients",
										"{{public_client_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SLAS",
					"item": [
						{
							"name": "Guest User • Private Client",
							"item": [
								{
									"name": "SLAS - Private Client - Guest - Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"guest_private_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Private Client - Guest - Get Refresh Guest Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"guest_private_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{guest_private_refresh_token}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Guest User • Public Client",
							"item": [
								{
									"name": "SLAS - Public Client - Guest - Authorize",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"PUBLIC_GUEST_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"PUBLIC_GUEST_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let code = null;",
													"let usid = null;",
													"",
													"pm.test(\"Status code is 303\", function () {",
													"    pm.response.to.have.status(303);",
													"    let location = pm.response.headers.get(\"Location\").split('?');",
													"    let params = location[1].split('&');",
													"    code = params.pop().substring(5);",
													"    usid = params.pop().substring(5);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonBody = pm.response.json();",
													"    code = jsonBody.code || jsonBody.authCode;",
													"    usid = jsonBody.usid;",
													"});",
													"",
													"console.log(`code is ${code}`);",
													"console.log(`usid is ${usid}`);",
													"if (code) pm.collectionVariables.set(\"auth_code\", code);",
													"if (usid) pm.collectionVariables.set(\"usid\", usid);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/authorize?redirect_uri={{redirect_url}}&response_type=code&client_id={{public_client_id}}&hint=guest&code_challenge={{PUBLIC_GUEST_CODE_CHALLENGE}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"authorize"
											],
											"query": [
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}"
												},
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}"
												},
												{
													"key": "hint",
													"value": "guest"
												},
												{
													"key": "code_challenge",
													"value": "{{PUBLIC_GUEST_CODE_CHALLENGE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Guest - Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"guest_public_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{auth_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code_pkce",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{PUBLIC_GUEST_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Guest - Get Refresh Guest Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"guest_public_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{guest_public_refresh_token}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ecom User • Private Client",
							"item": [
								{
									"name": "SLAS - Private Client - Ecom User - Authorize",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let code = null;",
													"let usid = null;",
													"",
													"pm.test(\"Status code is 303\", function () {",
													"    pm.response.to.have.status(303);",
													"    let location = pm.response.headers.get(\"Location\").split('?');",
													"    let params = location[1].split('&');",
													"    code = params.pop().substring(5);",
													"    usid = params[0].substring(5);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonBody = pm.response.json();",
													"    code = jsonBody.code || jsonBody.authCode;",
													"    usid = jsonBody.usid;",
													"});",
													"",
													"console.log(`code is ${code}`);",
													"console.log(`usid is ${usid}`);",
													"if (code) pm.collectionVariables.set(\"auth_code\", code);",
													"if (usid) pm.collectionVariables.set(\"usid\", usid);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{ecom_customer_login}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{ecom_customer_pw}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/login?client_id={{private_client_id}}&channel_id={{ocapi_site}}&redirect_uri={{redirect_url}}&code_challenge={{ECOM_USER_CODE_CHALLENGE}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"login"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{private_client_id}}"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}"
												},
												{
													"key": "code_challenge",
													"value": "{{ECOM_USER_CODE_CHALLENGE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Private Client - Ecom User - Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"b2c_private_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "Welcome@123",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{auth_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code_pkce",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{ECOM_USER_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Private Client - Ecom User - Get Refresh Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"b2c_private_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{b2c_private_refresh_token}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Ecom User • Public Client",
							"item": [
								{
									"name": "SLAS - Public Client - Ecom User - Authorize",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"PUBLIC_ECOM_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"PUBLIC_ECOM_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let code = null;",
													"let usid = null;",
													"",
													"pm.test(\"Status code is 303\", function () {",
													"    pm.response.to.have.status(303);",
													"    let location = pm.response.headers.get(\"Location\").split('?');",
													"    let params = location[1].split('&');",
													"    code = params.pop().substring(5);",
													"    usid = params[0].substring(5);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonBody = pm.response.json();",
													"    code = jsonBody.code || jsonBody.authCode;",
													"    usid = jsonBody.usid;",
													"});",
													"",
													"console.log(`code is ${code}`);",
													"console.log(`usid is ${usid}`);",
													"if (code) pm.environment.set(\"auth_code\", code);",
													"if (usid) pm.environment.set(\"usid\", usid);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "Welcome@123",
													"type": "string"
												},
												{
													"key": "username",
													"value": "SomanahalliParvathi",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/login?client_id={{public_client_id}}&channel_id={{ocapi_site}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"login"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{public_client_id}}"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}",
													"disabled": true
												},
												{
													"key": "code_challenge",
													"value": "{{PUBLIC_ECOM_CODE_CHALLENGE}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Ecom User - Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"b2c_public_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"user-agent": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "code",
													"value": "{{auth_code}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "authorization_code_pkce",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{PUBLIC_ECOM_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Ecom User - Get Refresh Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"b2c_public_refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "refresh_token",
													"value": "{{b2c_public_refresh_token}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "refresh_token",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Passwordless Login",
							"item": [
								{
									"name": "SLAS - Private Client - Request passwordless token",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "mode",
													"value": "callback",
													"type": "text"
												},
												{
													"key": "callback_uri",
													"value": "{{callback_url}}",
													"type": "text"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/passwordless/login",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"passwordless",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Private Client - Authenticate with passwordless token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}",
													"type": "text"
												},
												{
													"key": "hint",
													"value": "pwdless_login",
													"type": "text"
												},
												{
													"key": "pwdless_login_token",
													"value": "",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/passwordless/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"passwordless",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Trusted Agent on Behalf (TAOB)",
							"item": [
								{
									"name": "SLAS - Public Client - Get trusted agent authorization code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var redirectURL = pm.response.headers.get('Location');",
													"",
													"console.log(redirectURL);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/trusted-agent/authorize?client_id={{public_client_id}}&channel_id={{ocapi_site}}&code_challenge={{ECOM_USER_CODE_CHALLENGE}}&login_id={{ecom_customer_login}}&idp_origin=ecom&redirect_uri={{callback_url}}&response_type=code",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"trusted-agent",
												"authorize"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{public_client_id}}"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}"
												},
												{
													"key": "code_challenge",
													"value": "{{ECOM_USER_CODE_CHALLENGE}}"
												},
												{
													"key": "login_id",
													"value": "{{ecom_customer_login}}"
												},
												{
													"key": "idp_origin",
													"value": "ecom"
												},
												{
													"key": "redirect_uri",
													"value": "{{callback_url}}"
												},
												{
													"key": "response_type",
													"value": "code"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Request trusted agent access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "Bearer [Bearer token returned from Account Manager after the trusted agent on behalf of (TAOB) authorize call.]",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "agent_id",
													"value": "",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{ECOM_USER_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "idp_origin",
													"value": "ecom",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/trusted-agent/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"trusted-agent",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"description": "Perform \"SLAS - Public Client - Get trusted agent authorization code\" call, authorize in Account Manager and fetch the code from the URL of the callback URL.\n\nUse this ocde as the bearer token for the call \"SLAS - Public client - Request trusted agent access token\"."
						},
						{
							"name": "Trusted System on Behalf (TSOB) - for external trusted system",
							"item": [
								{
									"name": "SLAS - Get TSOB for external trusted systems for registered shoppers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonBody= pm.response.json();",
													"pm.environment.set(\"access_token\", jsonBody.access_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "hint",
													"value": "ts_ext_on_behalf_of",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "idp_origin",
													"value": "okta",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/trusted-system/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"trusted-system",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Get TSOB for external trusted systems for guest shoppers",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonBody= pm.response.json();",
													"pm.environment.set(\"access_token\", jsonBody.access_token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "hint",
													"value": "ts_ext_on_behalf_of",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "guest",
													"type": "text"
												},
												{
													"key": "idp_origin",
													"value": "okta",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/trusted-system/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"trusted-system",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains requests to get a \"Trusted System on Behalf\" (TSOB) token.\n\nYou can get such a token for external and internal trusted systems."
						},
						{
							"name": "Session Bridge • Guest User • Private Client",
							"item": [
								{
									"name": "SFCC - Add to Cart, Get DWSID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const cookies = pm.response.headers.filter(header=>header.key.includes('set-cookie'));",
													"for (let i=0; i < cookies.length; i++) {",
													"    if (cookies[i].value.includes('dwsid')) {",
													"        let cookieName = cookies[i].value.split(';')[0].split('=')[0];",
													"        let cookieValue = cookies[i].value.split(';')[0].split('dwsid=')[1];",
													"        if (cookieName === 'dwsid' && cookieValue) {",
													"            console.log(`dwsid: ${cookieValue}`)",
													"            pm.collectionVariables.set('dwsid', cookieValue);",
													"            break;",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pid",
													"value": "{{product_id}}",
													"type": "text"
												},
												{
													"key": "quantity",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Cart-AddProduct?format=ajax",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Cart-AddProduct"
											],
											"query": [
												{
													"key": "format",
													"value": "ajax"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Session bridge - Get JWT for DWSID cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "dwsid",
													"value": "{{dwsid}}",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "guest",
													"type": "text"
												},
												{
													"key": "hint",
													"value": "sb-guest",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/session-bridge/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"session-bridge",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Session Bridge • Guest User • Public Client",
							"item": [
								{
									"name": "SFCC - Add to Cart, Get DWSID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const cookies = pm.response.headers.filter(header=>header.key.includes('set-cookie'));",
													"for (let i=0; i < cookies.length; i++) {",
													"    if (cookies[i].value.includes('dwsid')) {",
													"        var cookieName = cookies[i].value.split(';')[0].split('=')[0];",
													"        var cookieValue = cookies[i].value.split(';')[0].split('=')[1];",
													"        if (cookieName === 'dwsid' && cookieValue) {",
													"            console.log(`dwsid: ${cookieValue}`)",
													"            pm.collectionVariables.set('dwsid', cookieValue);",
													"            break;",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pid",
													"value": "{{product_id}}",
													"type": "text"
												},
												{
													"key": "quantity",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Cart-AddProduct?format=ajax",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Cart-AddProduct"
											],
											"query": [
												{
													"key": "format",
													"value": "ajax"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Guest - Authorize",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let code = null;",
													"let usid = null;",
													"",
													"pm.test(\"Status code is 303\", function () {",
													"    pm.response.to.have.status(303);",
													"    let location = pm.response.headers.get(\"Location\").split('?');",
													"    let params = location[1].split('&');",
													"    code = params.pop().substring(5);",
													"    usid = params.pop().substring(5);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonBody = pm.response.json();",
													"    code = jsonBody.code || jsonBody.authCode;",
													"    usid = jsonBody.usid;",
													"});",
													"",
													"console.log(`code is ${code}`);",
													"console.log(`usid is ${usid}`);",
													"if (code) pm.collectionVariables.set(\"auth_code\", code);",
													"if (usid) pm.collectionVariables.set(\"usid\", usid);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"followRedirects": false
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/authorize?redirect_uri={{redirect_url}}&response_type=code&client_id={{public_client_id}}&hint=guest&code_challenge={{ECOM_USER_CODE_CHALLENGE}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"authorize"
											],
											"query": [
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}"
												},
												{
													"key": "response_type",
													"value": "code"
												},
												{
													"key": "client_id",
													"value": "{{public_client_id}}"
												},
												{
													"key": "hint",
													"value": "guest"
												},
												{
													"key": "code_challenge",
													"value": "{{ECOM_USER_CODE_CHALLENGE}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Session bridge - Get JWT for DWSID cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{ECOM_USER_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{auth_code}}",
													"type": "text"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "session_bridge",
													"type": "text"
												},
												{
													"key": "dwsid",
													"value": "{{dwsid}}",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "guest",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/session-bridge/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"session-bridge",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Session Bridge • Ecom User • Private Client",
							"item": [
								{
									"name": "SFCC - Add to Cart, Get DWSID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const cookies = pm.response.headers.filter(header=>header.key.includes('set-cookie'));",
													"for (let i=0; i < cookies.length; i++) {",
													"    if (cookies[i].value.includes('dwsid')) {",
													"        let cookieName = cookies[i].value.split(';')[0].split('=')[0];",
													"        let cookieValue = cookies[i].value.split(';')[0].split('dwsid=')[1];",
													"        if (cookieName === 'dwsid' && cookieValue) {",
													"            console.log(`dwsid: ${cookieValue}`)",
													"            pm.collectionVariables.set('dwsid', cookieValue);",
													"            break;",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pid",
													"value": "{{product_id}}",
													"type": "text"
												},
												{
													"key": "quantity",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Cart-AddProduct?format=ajax",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Cart-AddProduct"
											],
											"query": [
												{
													"key": "format",
													"value": "ajax"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SFCC - Login-Show, get CSRF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseHTML = cheerio(pm.response.text());",
													"var csrf = responseHTML.find('[name=\"csrf_token\"]').val();",
													"if (csrf) {",
													"    pm.collectionVariables.set('csrf', csrf);",
													"    console.log(`csrf: ${csrf}`)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Login-Show",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Login-Show"
											]
										}
									},
									"response": []
								},
								{
									"name": "SFCC - Account-Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const cookies = pm.response.headers.filter(header=>header.key.includes('set-cookie'));",
													"for (let i=0; i < cookies.length; i++) {",
													"    if (cookies[i].value.includes('dwsid')) {",
													"        let cookieName = cookies[i].value.split(';')[0].split('=')[0];",
													"        let cookieValue = cookies[i].value.split(';')[0].split('dwsid=')[1];",
													"        if (cookieName === 'dwsid' && cookieValue) {",
													"            console.log(`dwsid: ${cookieValue}`)",
													"            pm.collectionVariables.set('dwsid', cookieValue);",
													"            break;",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "loginEmail",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "loginPassword",
													"value": "{{ecom_customer_pw}}",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{csrf}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Account-Login",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Account-Login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Session bridge - Get JWT for DWSID cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "dwsid",
													"value": "{{dwsid}}",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "hint",
													"value": "sb-user",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/session-bridge/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"session-bridge",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Session Bridge • Ecom User • Public Client",
							"item": [
								{
									"name": "SFCC - Add to Cart, Get DWSID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const cookies = pm.response.headers.filter(header=>header.key.includes('set-cookie'));",
													"for (let i=0; i < cookies.length; i++) {",
													"    if (cookies[i].value.includes('dwsid')) {",
													"        let cookieName = cookies[i].value.split(';')[0].split('=')[0];",
													"        let cookieValue = cookies[i].value.split(';')[0].split('dwsid=')[1];",
													"        if (cookieName === 'dwsid' && cookieValue) {",
													"            console.log(`dwsid: ${cookieValue}`)",
													"            pm.collectionVariables.set('dwsid', cookieValue);",
													"            break;",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "pid",
													"value": "{{product_id}}",
													"type": "text"
												},
												{
													"key": "quantity",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Cart-AddProduct?format=ajax",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Cart-AddProduct"
											],
											"query": [
												{
													"key": "format",
													"value": "ajax"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SFCC - Login-Show, get CSRF",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseHTML = cheerio(pm.response.text());",
													"var csrf = responseHTML.find('[name=\"csrf_token\"]').val();",
													"if (csrf) {",
													"    pm.collectionVariables.set('csrf', csrf);",
													"    console.log(`csrf: ${csrf}`)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Login-Show",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Login-Show"
											]
										}
									},
									"response": []
								},
								{
									"name": "SFCC - Account-Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const cookies = pm.response.headers.filter(header=>header.key.includes('set-cookie'));",
													"for (let i=0; i < cookies.length; i++) {",
													"    if (cookies[i].value.includes('dwsid')) {",
													"        let cookieName = cookies[i].value.split(';')[0].split('=')[0];",
													"        let cookieValue = cookies[i].value.split(';')[0].split('dwsid=')[1];",
													"        if (cookieName === 'dwsid' && cookieValue) {",
													"            console.log(`dwsid: ${cookieValue}`)",
													"            pm.collectionVariables.set('dwsid', cookieValue);",
													"            break;",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{storefront_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "storefront",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "loginEmail",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "loginPassword",
													"value": "{{ecom_customer_pw}}",
													"type": "text"
												},
												{
													"key": "csrf_token",
													"value": "{{csrf}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{ocapi_uri}}/on/demandware.store/Sites-{{ocapi_site}}-Site/{{locale}}/Account-Login",
											"host": [
												"{{ocapi_uri}}"
											],
											"path": [
												"on",
												"demandware.store",
												"Sites-{{ocapi_site}}-Site",
												"{{locale}}",
												"Account-Login"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Public Client - Ecom User - Authorize",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"PUBLIC_ECOM_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"PUBLIC_ECOM_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let code = null;",
													"let usid = null;",
													"",
													"pm.test(\"Status code is 303\", function () {",
													"    pm.response.to.have.status(303);",
													"    let location = pm.response.headers.get(\"Location\").split('?');",
													"    let params = location[1].split('&');",
													"    code = params.pop().substring(5);",
													"    usid = params[0].substring(5);",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var jsonBody = pm.response.json();",
													"    code = jsonBody.code || jsonBody.authCode;",
													"    usid = jsonBody.usid;",
													"});",
													"",
													"console.log(`code is ${code}`);",
													"console.log(`usid is ${usid}`);",
													"if (code) pm.collectionVariables.set(\"auth_code\", code);",
													"if (usid) pm.collectionVariables.set(\"usid\", usid);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{ecom_customer_pw}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{ecom_customer_login}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"url": {
											"raw": "{{HOST}}/shopper/auth/{{version}}/organizations/{{tenant}}/oauth2/login?client_id={{public_client_id}}&channel_id={{ocapi_site}}&redirect_uri={{redirect_url}}&code_challenge={{PUBLIC_ECOM_CODE_CHALLENGE}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"{{version}}",
												"organizations",
												"{{tenant}}",
												"oauth2",
												"login"
											],
											"query": [
												{
													"key": "client_id",
													"value": "{{public_client_id}}"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirect_url}}"
												},
												{
													"key": "code_challenge",
													"value": "{{PUBLIC_ECOM_CODE_CHALLENGE}}"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Session bridge - Get JWT for DWSID cookie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonBody= pm.response.json();",
													"pm.collectionVariables.set(\"access_token\", jsonBody.access_token);",
													"pm.collectionVariables.set(\"refresh_token\", jsonBody.refresh_token);",
													"pm.collectionVariables.set(\"customer_id\", jsonBody.customer_id);",
													"pm.collectionVariables.set(\"usid\", jsonBody.usid);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{public_client_id}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{PUBLIC_ECOM_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{auth_code}}",
													"type": "text"
												},
												{
													"key": "usid",
													"value": "{{usid}}",
													"type": "text"
												},
												{
													"key": "grant_type",
													"value": "session_bridge",
													"type": "text"
												},
												{
													"key": "dwsid",
													"value": "{{dwsid}}",
													"type": "text"
												},
												{
													"key": "login_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/session-bridge/token",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"session-bridge",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Reset Password of a SLAS Shopper",
							"item": [
								{
									"name": "SLAS - Get password reset token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateCodeVerifier() {",
													"    return generateRandomString(96);",
													"}",
													"",
													"function generateRandomString(length) {",
													"    var text = \"\";",
													"    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
													"    for (var i = 0; i < length; i++) {",
													"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
													"    }",
													"    return text;",
													"}",
													"",
													"function generateCodeChallenge(code_verifier) {",
													"    return CryptoJS.SHA256(code_verifier);",
													"}",
													"",
													"function base64URL(string) {",
													"    return string.toString(CryptoJS.enc.Base64).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_')",
													"}",
													"",
													"var verifier = base64URL(generateCodeVerifier());",
													"var challenge = base64URL(generateCodeChallenge(verifier));",
													"",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_VERIFIER\", verifier);",
													"pm.collectionVariables.set(\"ECOM_USER_CODE_CHALLENGE\", challenge);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "user_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "mode",
													"value": "callback",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												},
												{
													"key": "callback_uri",
													"value": "{{callback_url}}",
													"type": "text"
												},
												{
													"key": "client_id",
													"value": "{{private_client_id}}",
													"type": "text"
												},
												{
													"key": "code_challenge",
													"value": "{{ECOM_USER_CODE_CHALLENGE}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/password/reset",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"password",
												"reset"
											]
										}
									},
									"response": []
								},
								{
									"name": "SLAS - Reset password",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{private_client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{private_client_id}}",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"value": true,
													"type": "boolean"
												},
												{
													"key": "showPassword",
													"value": true,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{private_client_id}}",
													"type": "text"
												},
												{
													"key": "pwd_action_token",
													"value": "",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{ECOM_USER_CODE_VERIFIER}}",
													"type": "text"
												},
												{
													"key": "new_password",
													"value": "",
													"type": "text"
												},
												{
													"key": "user_id",
													"value": "{{ecom_customer_login}}",
													"type": "text"
												},
												{
													"key": "channel_id",
													"value": "{{ocapi_site}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{HOST}}/shopper/auth/v1/organizations/{{organizationId}}/oauth2/password/action",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"shopper",
												"auth",
												"v1",
												"organizations",
												"{{organizationId}}",
												"oauth2",
												"password",
												"action"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "shopper-baskets",
					"item": [
						{
							"name": "SCAPI - Create basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonBody= pm.response.json();",
											"pm.collectionVariables.set(\"basket_id\", jsonBody.basketId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerInfo\": {\n        \"email\": \"{{CUSTOMER_EMAIL}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ2ZXIiOiIxLjAiLCJqa3UiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJraWQiOiJkZjA2ZTdkOS04NDg5LTQ2ZmUtOWMwZi1kNTNlZDdkODg4OWUiLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4zLjQiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5zaG9wcGVyLW15YWNjb3VudC5iYXNrZXRzIHNmY2Muc2hvcHBlci1kaXNjb3Zlcnktc2VhcmNoIHNmY2Muc2hvcHBlci1teWFjY291bnQuYWRkcmVzc2VzIHNmY2Muc2hvcHBlci1wcm9kdWN0cyBzZmNjLnNob3BwZXItbXlhY2NvdW50LnJ3IHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMubG9naW4gc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5vcmRlcnMgc2ZjYy5zaG9wcGVyLWJhc2tldHMtb3JkZXJzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMucmVnaXN0ZXIgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5hZGRyZXNzZXMucncgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5wcm9kdWN0bGlzdHMucncgc2ZjYy5zaG9wcGVyLXByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItcHJvbW90aW9ucyBzZmNjLnNob3BwZXItYmFza2V0cy1vcmRlcnMucncgc2ZjYy5zaG9wcGVyLWdpZnQtY2VydGlmaWNhdGVzIHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzLnJ3IHNmY2Muc2hvcHBlci1wcm9kdWN0LXNlYXJjaCBzZmNjLnNob3BwZXItbXlhY2NvdW50LnByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItY2F0ZWdvcmllcyBzZmNjLnNob3BwZXItbXlhY2NvdW50Iiwic3ViIjoiY2Mtc2xhczo6enlibF8wMDU6OnNjaWQ6ZGJmMjc5YjQtMzQxYi00ZmE3LWIzZjEtYTgzZmRkNGM3MTY5Ojp1c2lkOjFhMWMxZDM0LTkzMzAtNDNhOS1iNzQ2LTkzOTZjZmRiZTZiNyIsImN0eCI6InNsYXMiLCJpc3MiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvcHJvZC96eWJsXzAwNSIsIm5iZiI6MTY5NjQ0MDc4MSwic3R5IjoiVXNlciIsImlzYiI6InVpZG86ZWNvbTo6dXBuOlNvbWFuYWhhbGxpUGFydmF0aGk6OnVpZG46UGFydmF0aGkgU29tYW5haGFsbGk6OmdjaWQ6YWJrdWNWd1hkSWtYb1JtcmtYa2FZWWswYzM6OnJjaWQ6YWJ3SHBLa3JKS2tIc1JscmdYeEdZWXhiZzM6OmNoaWQ6UmVmQXJjaCIsImV4cCI6MTY5NjQ0MjYxMSwiaWF0IjoxNjk2NDQwODExLCJqdGkiOiJDMkMtODU0NDA4NzgxMDEwNjQyNTk0MjY3MjMyOTI3NTc2ODU1MzA3In0.EU5LUEc1P4B49jwU8FC0eacv_QiPGZZqiwmWR3huVc8knAOCkIxHJIgqIueR2s-5MTuYTQg2s4ZzwiC4b4vTAA",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Merge basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/actions/merge?siteId={{siteId}}&createDestinationBasket=true&productItemMergeMode=sum_quantities",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"actions",
										"merge"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										},
										{
											"key": "createDestinationBasket",
											"value": "true"
										},
										{
											"key": "productItemMergeMode",
											"value": "sum_quantities"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"EUR\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Delete basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update billing address on basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"address1\": \"415 Mission St\",\n    \"city\": \"San Francisco\",\n    \"postalCode\": \"94105\",\n    \"stateCode\": \"CA\",\n    \"countryCode\": \"US\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/billing-address?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"billing-address"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update customer on basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"shopperUpdate@salesforce-test.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/customer?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"customer"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Add coupon to basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"10_percent_off\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/coupons?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"coupons"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove coupon from basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/coupons/test-couponItemId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"coupons",
										"test-couponItemId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Add gift certificate item to basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 1,\n    \"recipientEmail\": \"miller@salesforce-test.com\",\n    \"shipmentId\": \"me\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/gift-certificate-items?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"gift-certificate-items"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove gift certificate item from basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/gift-certificate-items/test-giftCertificateItemId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"gift-certificate-items",
										"test-giftCertificateItemId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Add item to basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ2ZXIiOiIxLjAiLCJqa3UiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJraWQiOiJkZjA2ZTdkOS04NDg5LTQ2ZmUtOWMwZi1kNTNlZDdkODg4OWUiLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4zLjQiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5zaG9wcGVyLW15YWNjb3VudC5iYXNrZXRzIHNmY2Muc2hvcHBlci1kaXNjb3Zlcnktc2VhcmNoIHNmY2Muc2hvcHBlci1teWFjY291bnQuYWRkcmVzc2VzIHNmY2Muc2hvcHBlci1wcm9kdWN0cyBzZmNjLnNob3BwZXItbXlhY2NvdW50LnJ3IHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMubG9naW4gc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5vcmRlcnMgc2ZjYy5zaG9wcGVyLWJhc2tldHMtb3JkZXJzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMucmVnaXN0ZXIgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5hZGRyZXNzZXMucncgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5wcm9kdWN0bGlzdHMucncgc2ZjYy5zaG9wcGVyLXByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItcHJvbW90aW9ucyBzZmNjLnNob3BwZXItYmFza2V0cy1vcmRlcnMucncgc2ZjYy5zaG9wcGVyLWdpZnQtY2VydGlmaWNhdGVzIHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzLnJ3IHNmY2Muc2hvcHBlci1wcm9kdWN0LXNlYXJjaCBzZmNjLnNob3BwZXItbXlhY2NvdW50LnByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItY2F0ZWdvcmllcyBzZmNjLnNob3BwZXItbXlhY2NvdW50Iiwic3ViIjoiY2Mtc2xhczo6enlibF8wMDU6OnNjaWQ6ZGJmMjc5YjQtMzQxYi00ZmE3LWIzZjEtYTgzZmRkNGM3MTY5Ojp1c2lkOjFhMWMxZDM0LTkzMzAtNDNhOS1iNzQ2LTkzOTZjZmRiZTZiNyIsImN0eCI6InNsYXMiLCJpc3MiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvcHJvZC96eWJsXzAwNSIsIm5iZiI6MTY5NjU5MjAzNSwic3R5IjoiVXNlciIsImlzYiI6InVpZG86ZWNvbTo6dXBuOlNvbWFuYWhhbGxpUGFydmF0aGk6OnVpZG46UGFydmF0aGkgU29tYW5haGFsbGk6OmdjaWQ6YWJrdWNWd1hkSWtYb1JtcmtYa2FZWWswYzM6OnJjaWQ6YWJ3SHBLa3JKS2tIc1JscmdYeEdZWXhiZzM6OmNoaWQ6UmVmQXJjaCIsImV4cCI6MTY5NjU5Mzg2NSwiaWF0IjoxNjk2NTkyMDY1LCJqdGkiOiJDMkMtODU0NDA4NzgxMDEwNjQyNTk0MjY3Mzg0MDc0MDMxNzQzNDM5In0.cI8d1sP3PjGbERPPMgJ7SOZE9C8-TkoD6MNTTmCSFJ_xTguvcJtcprlWFumYtq9ZlygKpTDB2PfiQC-AYcKhHQ",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"productId\": \"{{product_id}}\",\n        \"quantity\": 1\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/081956a6853d5f93e84a3d91c3/items?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"081956a6853d5f93e84a3d91c3",
										"items"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove item from basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/items/test-itemId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"items",
										"test-itemId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update item in basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"quantity\": 2\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/items/test-itemId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"items",
										"test-itemId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Add CREDIT_CARD payment instrument to basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 9.99,\n    \"paymentCard\": {\n        \"expirationYear\": 1990,\n        \"expirationMonth\": 7,\n        \"validFromMonth\": 8,\n        \"validFromYear\": 2007,\n        \"issueNumber\": \"i117\",\n        \"maskedNumber\": \"*********1234\",\n        \"holder\": \"Miller\",\n        \"cardType\": \"Visa\"\n    },\n    \"paymentMethodId\": \"CREDIT_CARD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/payment-instruments?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Add GIFT_CERTIFICATE payment instrument to basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 9.99,\n    \"giftCertificateCode\": \"test-giftCertificateCode\",\n    \"paymentMethodId\": \"GIFT_CERTIFICATE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/payment-instruments?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Add other payment instrument to basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 9.99,\n    \"paymentMethodId\": \"TEST_PAYPAL_PAYMENT_METHOD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/payment-instruments?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove payment instrument from basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/payment-instruments/test-paymentInstrumentId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"payment-instruments",
										"test-paymentInstrumentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update payment instrument",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 10.34,\n    \"paymentMethodId\": \"CREDIT_CARD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/payment-instruments/test-paymentInstrumentId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"payment-instruments",
										"test-paymentInstrumentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create shipment for basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"shipmentId\": \"me2\",\n    \"shippingMethod\": {\n        \"id\": \"001\"\n    },\n    \"shippingAddress\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"address1\": \"415 Mission St\",\n        \"city\": \"Jena\",\n        \"postalCode\": \"94105\",\n        \"stateCode\": \"CA\",\n        \"countryCode\": \"US\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/shipments?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"shipments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove shipment from basket",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/shipments/test-shpmentId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"shipments",
										"test-shpmentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"shipmentId\": \"me\",\n    \"shipmentNo\": \"ignored shipment no\",\n    \"shippingMethod\": {\n        \"id\": \"003\"\n    },\n    \"shippingAddress\": {\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\",\n        \"address1\": \"415 Mission St\",\n        \"city\": \"San Francisco\",\n        \"postalCode\": \"94105\",\n        \"stateCode\": \"CA\",\n        \"countryCode\": \"US\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/shipments/test-shpmentId?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"shipments",
										"test-shpmentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update shipping address on shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\",\n    \"address1\": \"111 President Street\",\n    \"city\": \"Washington D.C.\",\n    \"postalCode\": \"12345\",\n    \"stateCode\": \"WA\",\n    \"countryCode\": \"US\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/shipments/test-shpmentId/shipping-address?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"shipments",
										"test-shpmentId",
										"shipping-address"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update shipping method on shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"test-shippingMethodId\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/shipments/test-shpmentId/shipping-method?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"shipments",
										"test-shpmentId",
										"shipping-method"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get shipping methods for shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-baskets/{{version}}/organizations/{{organizationId}}/baskets/{{basket_id}}/shipments/test-shpmentId/shipping-methods?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basket_id}}",
										"shipments",
										"test-shpmentId",
										"shipping-methods"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "shopper-context",
					"item": [
						{
							"name": "SCAPI - Create shopper context",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonBody= pm.response.json();",
											"pm.collectionVariables.set(\"basket_id\", jsonBody.basketId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"effectiveDateTime\": \"2020-12-20T00:00:00Z\",\n    \"customQualifiers\": {\n        \"deviceType\": \"mobile\",\n        \"sourceCodeGroup\": \"Sale\",\n        \"referrerURL\": \"https://www.google.com\",\n        \"currency\": \"USD\",\n        \"referrerHost\": \"google\",\n        \"authenticated\": \"no\",\n        \"ipAddress\": \"189.0.0.0\",\n        \"zipCode\": \"11111\",\n        \"country\": \"US\",\n        \"region\": \"West\",\n        \"city\": \"SLC\",\n        \"operatingSystem\": \"Android\",\n        \"customergroupId\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/shopper/shopper-context/v1/organizations/{{organizationId}}/shopper-context/test-shoppersUniqueIdentifier?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"shopper-context",
										"v1",
										"organizations",
										"{{organizationId}}",
										"shopper-context",
										"test-shoppersUniqueIdentifier"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get shopper context",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonBody= pm.response.json();",
											"pm.collectionVariables.set(\"basket_id\", jsonBody.basketId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"effectiveDateTime\": \"2020-12-20T00:00:00Z\",\n    \"customQualifiers\": {\n        \"deviceType\": \"mobile\",\n        \"sourceCodeGroup\": \"Sale\",\n        \"referrerURL\": \"https://www.google.com\",\n        \"currency\": \"USD\",\n        \"referrerHost\": \"google\",\n        \"authenticated\": \"no\",\n        \"ipAddress\": \"189.0.0.0\",\n        \"zipCode\": \"11111\",\n        \"country\": \"US\",\n        \"region\": \"West\",\n        \"city\": \"SLC\",\n        \"operatingSystem\": \"Android\",\n        \"customergroupId\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/shopper/shopper-context/v1/organizations/{{organizationId}}/shopper-context/test-shoppersUniqueIdentifier?siteId={{siteId}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"shopper-context",
										"v1",
										"organizations",
										"{{organizationId}}",
										"shopper-context",
										"test-shoppersUniqueIdentifier"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Delete shopper context",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/shopper/shopper-context/v1/organizations/{{organizationId}}/shopper-context/test-shoppersUniqueIdentifier",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"shopper-context",
										"v1",
										"organizations",
										"{{organizationId}}",
										"shopper-context",
										"test-shoppersUniqueIdentifier"
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update shopper context",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"effectiveDateTime\": \"2020-12-20T00:00:00Z\",\n    \"customQualifiers\": {\n        \"deviceType\": \"mobile\",\n        \"sourceCodeGroup\": \"Sale\",\n        \"referrerURL\": \"https://www.google.com\",\n        \"currency\": \"USD\",\n        \"referrerHost\": \"google\",\n        \"authenticated\": \"no\",\n        \"ipAddress\": \"189.0.0.0\",\n        \"zipCode\": \"11111\",\n        \"country\": \"US\",\n        \"region\": \"West\",\n        \"city\": \"SLC\",\n        \"operatingSystem\": \"Android\",\n        \"customergroupId\": \"\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/shopper/shopper-context/v1/organizations/{{organizationId}}/shopper-context/test-shoppersUniqueIdentifier",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"shopper",
										"shopper-context",
										"v1",
										"organizations",
										"{{organizationId}}",
										"shopper-context",
										"test-shoppersUniqueIdentifier"
									]
								}
							},
							"response": []
						}
					],
					"description": "As of September 22 2022, these API endpoints are in Beta status!\n\nPlease have a look at [https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-context?meta=Summary) to get the latest status of the API endpoints and to understand how the overall use-cases are working."
				},
				{
					"name": "shopper-customers",
					"item": [
						{
							"name": "SCAPI - Register new customer",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ2ZXIiOiIxLjAiLCJqa3UiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJraWQiOiJkZjA2ZTdkOS04NDg5LTQ2ZmUtOWMwZi1kNTNlZDdkODg4OWUiLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4zLjQiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5zaG9wcGVyLW15YWNjb3VudC5iYXNrZXRzIHNmY2Muc2hvcHBlci1kaXNjb3Zlcnktc2VhcmNoIHNmY2Muc2hvcHBlci1teWFjY291bnQuYWRkcmVzc2VzIHNmY2Muc2hvcHBlci1wcm9kdWN0cyBzZmNjLnNob3BwZXItbXlhY2NvdW50LnJ3IHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMubG9naW4gc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5vcmRlcnMgc2ZjYy5zaG9wcGVyLWJhc2tldHMtb3JkZXJzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMucmVnaXN0ZXIgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5hZGRyZXNzZXMucncgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5wcm9kdWN0bGlzdHMucncgc2ZjYy5zaG9wcGVyLXByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItcHJvbW90aW9ucyBzZmNjLnNob3BwZXItYmFza2V0cy1vcmRlcnMucncgc2ZjYy5zaG9wcGVyLWdpZnQtY2VydGlmaWNhdGVzIHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzLnJ3IHNmY2Muc2hvcHBlci1wcm9kdWN0LXNlYXJjaCBzZmNjLnNob3BwZXItbXlhY2NvdW50LnByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItY2F0ZWdvcmllcyBzZmNjLnNob3BwZXItbXlhY2NvdW50Iiwic3ViIjoiY2Mtc2xhczo6enlibF8wMDU6OnNjaWQ6ZGJmMjc5YjQtMzQxYi00ZmE3LWIzZjEtYTgzZmRkNGM3MTY5Ojp1c2lkOmJkMTk1NDNhLWJkZDYtNDBhNi04M2FmLTBmMmQ5ODQ1YTI3NiIsImN0eCI6InNsYXMiLCJpc3MiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvcHJvZC96eWJsXzAwNSIsIm5iZiI6MTY5NjMzODg1NSwic3R5IjoiVXNlciIsImlzYiI6InVpZG86c2xhczo6dXBuOkd1ZXN0Ojp1aWRuOkd1ZXN0IFVzZXI6OmdjaWQ6YWJ3S29WbXJzWWswY1J3S3BJbEdZWWtlYzA6OmNoaWQ6ICIsImV4cCI6MTY5NjM0MDY4NSwiaWF0IjoxNjk2MzM4ODg1LCJqdGkiOiJDMkMtODU0NDA4NzgxMDEwNjQyNTk0MjY3MTMwODAxNjgxOTE4MTE1In0.jeu1m01grKM65ZoquutDFN_ANAJD_XzSm6L8J7SjoXX_H0KaOYdFtI6711Ym9BT_A_DOgMSTSZd0a8DdHkcfKg",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"Welcome@123\",\n    \"customer\": {\n        \"login\": \"SomanahalliParvathi\",\n        \"email\": \"parvathi.somanahalli@concentrix.com\",\n        \"firstName\": \"Parvathi\",\n        \"lastName\": \"Somanahalli\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get reset password token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"janedoe@test.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/password/actions/create-reset-token?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"password",
										"actions",
										"create-reset-token"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Reset customer password",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"resetToken\": \"R1e2s3e4t5T6o7k8e9n0\",\n    \"login\": \"janedoe@test.com\",\n    \"newPassword\": \"p@assword2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/password/actions/reset?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"password",
										"actions",
										"reset"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ2ZXIiOiIxLjAiLCJqa3UiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJraWQiOiJkZjA2ZTdkOS04NDg5LTQ2ZmUtOWMwZi1kNTNlZDdkODg4OWUiLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4zLjQiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5zaG9wcGVyLW15YWNjb3VudC5iYXNrZXRzIHNmY2Muc2hvcHBlci1kaXNjb3Zlcnktc2VhcmNoIHNmY2Muc2hvcHBlci1teWFjY291bnQuYWRkcmVzc2VzIHNmY2Muc2hvcHBlci1wcm9kdWN0cyBzZmNjLnNob3BwZXItbXlhY2NvdW50LnJ3IHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMubG9naW4gc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5vcmRlcnMgc2ZjYy5zaG9wcGVyLWJhc2tldHMtb3JkZXJzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMucmVnaXN0ZXIgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5hZGRyZXNzZXMucncgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5wcm9kdWN0bGlzdHMucncgc2ZjYy5zaG9wcGVyLXByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItcHJvbW90aW9ucyBzZmNjLnNob3BwZXItYmFza2V0cy1vcmRlcnMucncgc2ZjYy5zaG9wcGVyLWdpZnQtY2VydGlmaWNhdGVzIHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzLnJ3IHNmY2Muc2hvcHBlci1wcm9kdWN0LXNlYXJjaCBzZmNjLnNob3BwZXItbXlhY2NvdW50LnByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItY2F0ZWdvcmllcyBzZmNjLnNob3BwZXItbXlhY2NvdW50Iiwic3ViIjoiY2Mtc2xhczo6enlibF8wMDU6OnNjaWQ6ZGJmMjc5YjQtMzQxYi00ZmE3LWIzZjEtYTgzZmRkNGM3MTY5Ojp1c2lkOjkxMmI3OTY0LTEyNTctNGE1NS04ZDcyLThhMjYyNzdiZmQwZSIsImN0eCI6InNsYXMiLCJpc3MiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvcHJvZC96eWJsXzAwNSIsIm5iZiI6MTY5NjM0NTIxMiwic3R5IjoiVXNlciIsImlzYiI6InVpZG86c2xhczo6dXBuOkd1ZXN0Ojp1aWRuOkd1ZXN0IFVzZXI6OmdjaWQ6YWJtcmNXd0hBM2xIb1JrcmdabFdZWXdyc1o6OmNoaWQ6ICIsImV4cCI6MTY5NjM0NzA0MiwiaWF0IjoxNjk2MzQ1MjQyLCJqdGkiOiJDMkMtODU0NDA4NzgxMDEwNjQyNTk0MjY3MTM3MzU4NTE3NjMxMTg1In0.iVDcpPYwyQoZoFTFxc26ruzT96ooSkZaMO6ni1yUvjdasI2VClDxjOQMbdvE8imaGe5A6p7tIqHy1lpluihd4w",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/abwHpKkrJKkHsRlrgXxGYYxbg3?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"abwHpKkrJKkHsRlrgXxGYYxbg3"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update customer",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": {\n        \"value\": {\n            \"customerNo\": \"00010009\",\n            \"firstName\": \"John\",\n            \"lastName\": \"Wild\",\n            \"email\": \"jwild@yourstore.com\",\n            \"fax\": \"+49 03641 78393 346\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create customer address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"addressId\": \"home_address\",\n    \"address1\": \"5 Wall St\",\n    \"address2\": \"24 Presidential Way\",\n    \"city\": \"Burlington\",\n    \"companyName\": \"Salesforce Commerce Cloud\",\n    \"countryCode\": \"US\",\n    \"firstName\": \"John\",\n    \"jobTitle\": \"Developer\",\n    \"lastName\": \"Murphy\",\n    \"phone\": \"408-555-1212\",\n    \"postalCode\": \"01805\",\n    \"postBox\": \"12a\",\n    \"preferred\": false,\n    \"salutation\": \"Mr.\",\n    \"secondName\": \"Jim\",\n    \"stateCode\": \"MA\",\n    \"title\": \"Dr.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/addresses?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"addresses"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/addresses/test-addressId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"addresses",
										"test-addressId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update customer address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"addressId\": \"home_address\",\n    \"address1\": \"5 Wall St\",\n    \"address2\": \"24 Presidential Way\",\n    \"city\": \"Burlington\",\n    \"companyName\": \"Salesforce Commerce Cloud\",\n    \"countryCode\": \"US\",\n    \"firstName\": \"John\",\n    \"jobTitle\": \"Developer\",\n    \"lastName\": \"Murphy\",\n    \"phone\": \"408-555-1212\",\n    \"postalCode\": \"01805\",\n    \"postBox\": \"12a\",\n    \"preferred\": false,\n    \"salutation\": \"Mr.\",\n    \"secondName\": \"Jim\",\n    \"stateCode\": \"MA\",\n    \"title\": \"Dr.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/addresses/test-addressId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"addresses",
										"test-addressId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove customer address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/addresses/test-addressId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"addresses",
										"test-addressId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer baskets",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/baskets?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"baskets"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer orders",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/orders?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"orders"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update customer password",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"01dpass\",\n    \"password\": \"newpass\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/password?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"password"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create CREDIT_CARD customer payment instrument",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentCard\": {\n        \"expirationYear\": 2027,\n        \"expirationMonth\": 7,\n        \"validFromMonth\": 8,\n        \"validFromYear\": 2007,\n        \"issueNumber\": \"i117\",\n        \"number\": \"1234567\",\n        \"holder\": \"John Smith\",\n        \"cardType\": \"MasterCard\"\n    },\n    \"paymentMethodId\": \"CREDIT_CARD\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/payment-instruments?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create GIFT_CERTIFICATE customer payment instrument",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"giftCertificateCode\": \"gift_code7\",\n    \"paymentMethodId\": \"GIFT_CERTIFICATE\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/payment-instruments?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create other customer payment instrument",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentMethodId\": \"OTHER_PAYMENT_METHOD\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/payment-instruments?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer payment instrument",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/payment-instruments/test-paymentInstrumentId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"payment-instruments",
										"test-paymentInstrumentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Delete customer payment instrument",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/payment-instruments/test-paymentInstrumentId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"payment-instruments",
										"test-paymentInstrumentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer product lists",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create customer product list",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"coRegistrant\": {\n        \"email\": \"janedoe@example.com\",\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\",\n        \"role\": \"Bride\"\n    },\n    \"creationDate\": \"2019-10-18T22:06:28.965Z\",\n    \"description\": \"our productlist\",\n    \"event\": {\n        \"city\": \"Washington\",\n        \"country\": \"US\",\n        \"date\": \"2019-09-05T17:12:56.670Z\",\n        \"state\": \"DC\",\n        \"type\": \"Wedding\"\n    },\n    \"id\": \"bcedkiWbxCM2MaaadkRhB2IBzM\",\n    \"lastModified\": \"2019-10-18T22:06:28.971Z\",\n    \"name\": \"OurProductList\",\n    \"public\": true,\n    \"registrant\": {\n        \"email\": \"johndoe@example.com\",\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"role\": \"Groom\"\n    },\n    \"type\": \"wish_list\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Delete customer product list",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists/bcedkiWbxCM2MaaadkRhB2IBzM?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists",
										"bcedkiWbxCM2MaaadkRhB2IBzM"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer product list",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ2ZXIiOiIxLjAiLCJqa3UiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJraWQiOiJkZjA2ZTdkOS04NDg5LTQ2ZmUtOWMwZi1kNTNlZDdkODg4OWUiLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4zLjQiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5zaG9wcGVyLW15YWNjb3VudC5iYXNrZXRzIHNmY2Muc2hvcHBlci1kaXNjb3Zlcnktc2VhcmNoIHNmY2Muc2hvcHBlci1teWFjY291bnQuYWRkcmVzc2VzIHNmY2Muc2hvcHBlci1wcm9kdWN0cyBzZmNjLnNob3BwZXItbXlhY2NvdW50LnJ3IHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMubG9naW4gc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5vcmRlcnMgc2ZjYy5zaG9wcGVyLWJhc2tldHMtb3JkZXJzIHNmY2Muc2hvcHBlci1jdXN0b21lcnMucmVnaXN0ZXIgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5hZGRyZXNzZXMucncgc2ZjYy5zaG9wcGVyLW15YWNjb3VudC5wcm9kdWN0bGlzdHMucncgc2ZjYy5zaG9wcGVyLXByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItcHJvbW90aW9ucyBzZmNjLnNob3BwZXItYmFza2V0cy1vcmRlcnMucncgc2ZjYy5zaG9wcGVyLWdpZnQtY2VydGlmaWNhdGVzIHNmY2Muc2hvcHBlci1teWFjY291bnQucGF5bWVudGluc3RydW1lbnRzLnJ3IHNmY2Muc2hvcHBlci1wcm9kdWN0LXNlYXJjaCBzZmNjLnNob3BwZXItbXlhY2NvdW50LnByb2R1Y3RsaXN0cyBzZmNjLnNob3BwZXItY2F0ZWdvcmllcyBzZmNjLnNob3BwZXItbXlhY2NvdW50Iiwic3ViIjoiY2Mtc2xhczo6enlibF8wMDU6OnNjaWQ6ZGJmMjc5YjQtMzQxYi00ZmE3LWIzZjEtYTgzZmRkNGM3MTY5Ojp1c2lkOjJmMjlhNWU5LWVjOWMtNGFlNy04ZWZiLWVjZTM2YWYwMmUzNSIsImN0eCI6InNsYXMiLCJpc3MiOiJzbGFzL3Byb2QvenlibF8wMDUiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvcHJvZC96eWJsXzAwNSIsIm5iZiI6MTY5NjM0MDk0Mywic3R5IjoiVXNlciIsImlzYiI6InVpZG86c2xhczo6dXBuOkd1ZXN0Ojp1aWRuOkd1ZXN0IFVzZXI6OmdjaWQ6YWJrS3dXbXVjWnhySVJ4dWszd1dZWXd1czE6OmNoaWQ6ICIsImV4cCI6MTY5NjM0Mjc3MywiaWF0IjoxNjk2MzQwOTczLCJqdGkiOiJDMkMtODU0NDA4NzgxMDEwNjQyNTk0MjY3MTMyODAyNzk3MDQyMDE5In0.rFK6Myt78QAwM3SMcMRbsAogbuNEs8fQDBRaW2WQuwgm1pvNFBtQz6lJKlQtNS9rZVq0aoYWmjMcuCQhahDuvA",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/abkXgWmbdHmrkRwHBHmqYYluc0/product-lists/f3f1392339fd9a4fe64354669f?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"abkXgWmbdHmrkRwHBHmqYYluc0",
										"product-lists",
										"f3f1392339fd9a4fe64354669f"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "SCAPI - Get customer product list",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/abkXgWmbdHmrkRwHBHmqYYluc0/product-lists/f3f1392339fd9a4fe64354669f?siteId={{ocapi_site}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"customer",
												"shopper-customers",
												"v1",
												"organizations",
												"{{organizationId}}",
												"customers",
												"abkXgWmbdHmrkRwHBHmqYYluc0",
												"product-lists",
												"f3f1392339fd9a4fe64354669f"
											],
											"query": [
												{
													"key": "siteId",
													"value": "{{ocapi_site}}"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 03 Oct 2023 14:01:12 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										},
										{
											"key": "Content-Length",
											"value": "161"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "CF-Ray",
											"value": "8105b73c99ab4413-BOM"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Accept-Ranges",
											"value": "bytes"
										},
										{
											"key": "Cache-Control",
											"value": "no-cache, no-store"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Dec 1994 16:00:00 GMT"
										},
										{
											"key": "jweb",
											"value": "y"
										},
										{
											"key": "pragma",
											"value": "no-cache"
										},
										{
											"key": "x-correlation-id",
											"value": "8105b73c99ab4413"
										},
										{
											"key": "x-envoy-upstream-service-time",
											"value": "13"
										},
										{
											"key": "x-ratelimit-limit",
											"value": "99999"
										},
										{
											"key": "x-ratelimit-remaining",
											"value": "999"
										},
										{
											"key": "Report-To",
											"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/csp-reporting.cloudflare.com\\/cdn-cgi\\/script_monitor\\/report?m=egaasFaJ5VDg9cnykUQ6U9FnUy40nTEa.Ny3U4a69Zc-1696341672-0-AcZoQK87wdvvVEe9guy10OcKhQftHS7pUWeqrXfk1EgGyfjj3ojEmKCbAR0xo3QgiKSOWSPbCTQXefCZxK3BY4OVsFSb0sMOD8mMhwrCy8uOOkhnhxSUrA9pw-h-eZhXZr8ftsh96DKnDmkVddT5YXpd0gJ7eOqoPomWwJQAkETskvVr99dIF5kmuUa9wQHFKQ\"}],\"group\":\"cf-csp-endpoint\",\"max_age\":86400}"
										},
										{
											"key": "Content-Security-Policy-Report-Only",
											"value": "script-src 'none'; report-uri https://csp-reporting.cloudflare.com/cdn-cgi/script_monitor/report?m=egaasFaJ5VDg9cnykUQ6U9FnUy40nTEa.Ny3U4a69Zc-1696341672-0-AcZoQK87wdvvVEe9guy10OcKhQftHS7pUWeqrXfk1EgGyfjj3ojEmKCbAR0xo3QgiKSOWSPbCTQXefCZxK3BY4OVsFSb0sMOD8mMhwrCy8uOOkhnhxSUrA9pw-h-eZhXZr8ftsh96DKnDmkVddT5YXpd0gJ7eOqoPomWwJQAkETskvVr99dIF5kmuUa9wQHFKQ; report-to cf-csp-endpoint"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										}
									],
									"cookie": [],
									"body": "{\n    \"title\": \"Invalid Customer\",\n    \"type\": \"https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-customer\",\n    \"detail\": \"The customer is invalid.\"\n}"
								}
							]
						},
						{
							"name": "SCAPI - Update customer product list",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"productlist2\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists/bcedkiWbxCM2MaaadkRhB2IBzM?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists",
										"bcedkiWbxCM2MaaadkRhB2IBzM"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create customer product list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"1d447daa4d25805fd682bd4ce1\",\n  \"priority\": 4,\n  \"productId\": \"RedDress1\",\n  \"public\": true,\n  \"purchasedQuantity\": 0,\n  \"quantity\": 2,\n  \"type\": \"product\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists/bcedkiWbxCM2MaaadkRhB2IBzM/items?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists",
										"bcedkiWbxCM2MaaadkRhB2IBzM",
										"items"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Delete customer product list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists/bcedkiWbxCM2MaaadkRhB2IBzM/items/1d447daa4d25805fd682bd4ce1?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists",
										"bcedkiWbxCM2MaaadkRhB2IBzM",
										"items",
										"1d447daa4d25805fd682bd4ce1"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get customer product list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists/bcedkiWbxCM2MaaadkRhB2IBzM/items/1d447daa4d25805fd682bd4ce1?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists",
										"bcedkiWbxCM2MaaadkRhB2IBzM",
										"items",
										"1d447daa4d25805fd682bd4ce1"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update customer product list item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"productId\": \"RedDress1\",\n  \"id\": \"1\",\n  \"purchasedQuantity\": 0,\n  \"priority\": 3,\n  \"quantity\": 4,\n  \"public\": false,\n  \"type\": \"product\"\n}"
								},
								"url": {
									"raw": "{{HOST}}/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customer_id}}/product-lists/bcedkiWbxCM2MaaadkRhB2IBzM/items/1d447daa4d25805fd682bd4ce1?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customer_id}}",
										"product-lists",
										"bcedkiWbxCM2MaaadkRhB2IBzM",
										"items",
										"1d447daa4d25805fd682bd4ce1"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "shopper-experience (turn off storefront pw protection)",
					"item": [
						{
							"name": "SCAPI - Get Pages (PLP)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/experience/shopper-experience/{{version}}/organizations/{{organizationId}}/pages?siteId={{ocapi_site}}&aspectTypeId=plp&categoryId={{category_id}}&aspectAttributes={\"category\":\"{{category_id}}\"}&locale={{locale}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"experience",
										"shopper-experience",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"pages"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										},
										{
											"key": "aspectTypeId",
											"value": "plp"
										},
										{
											"key": "categoryId",
											"value": "{{category_id}}"
										},
										{
											"key": "aspectAttributes",
											"value": "{\"category\":\"{{category_id}}\"}"
										},
										{
											"key": "locale",
											"value": "{{locale}}"
										},
										{
											"key": "parameters",
											"value": "refine=color,size;currency=USD;showNavigation=false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get Pages (PDP)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/experience/shopper-experience/{{version}}/organizations/{{organizationId}}/pages?siteId={{ocapi_site}}&aspectTypeId=pdp&categoryId={{category_id}}&aspectAttributes={\"product\":\"{{product_id}}\"}&locale={{locale}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"experience",
										"shopper-experience",
										"{{version}}",
										"organizations",
										"{{organizationId}}",
										"pages"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										},
										{
											"key": "aspectTypeId",
											"value": "pdp"
										},
										{
											"key": "categoryId",
											"value": "{{category_id}}"
										},
										{
											"key": "productId",
											"value": "{{product_id}}",
											"disabled": true
										},
										{
											"key": "aspectAttributes",
											"value": "{\"product\":\"{{product_id}}\"}"
										},
										{
											"key": "locale",
											"value": "{{locale}}"
										},
										{
											"key": "parameters",
											"value": "refine=color,size;currency=USD;showNavigation=false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get Page",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/experience/shopper-experience/v1/organizations/{{organizationId}}/pages/{{page_id}}?siteId={{ocapi_site}}&locale={{locale}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"experience",
										"shopper-experience",
										"v1",
										"organizations",
										"{{organizationId}}",
										"pages",
										"{{page_id}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										},
										{
											"key": "locale",
											"value": "{{locale}}"
										},
										{
											"key": "parameters",
											"value": "refine=color,size;currency=USD;showNavigation=false",
											"disabled": true
										},
										{
											"key": "aspectAttributes",
											"value": "{\"product\":\"iphone11\",\"breadcrumbCategory\":\"home-clearance\"}",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "shopper-orders",
					"item": [
						{
							"name": "SCAPI - Create order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"basketId\": \"{{basket_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/test-orderId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"test-orderId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create CREDIT_CARD payment instrument for order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 700,\n  \"paymentCard\": {\n    \"expirationYear\": 1990,\n    \"expirationMonth\": 7,\n    \"validFromMonth\": 8,\n    \"validFromYear\": 2007,\n    \"issueNumber\": \"i117\",\n    \"maskedNumber\": \"************4567\",\n    \"holder\": \"Miller\",\n    \"cardType\": \"Visa\"\n  },\n  \"paymentMethodId\": \"CREDIT_CARD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/test-orderId/payment-instruments?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"test-orderId",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Create GIFT_CERTIFICATE payment instrument for order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 700,\n  \"giftCertificateCode\": \"gift_code7\",\n  \"paymentMethodId\": \"GIFT_CERTIFICATE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/test-orderId/payment-instruments?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"test-orderId",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Remove payment instrument from order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/test-orderId/payment-instruments/test-paymentInstrumentId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"test-orderId",
										"payment-instruments",
										"test-paymentInstrumentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Update payment instrument of order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": 2,\n  \"paymentMethodId\": \"CREDIT_CARD\",\n  \"paymentCard\": {\n    \"cardType\": \"Visa\",\n    \"maskedNumber\": \"****-****-****-4567\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/test-orderId/payment-instruments/test-paymentInstrumentId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"test-orderId",
										"payment-instruments",
										"test-paymentInstrumentId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get payment methods for order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/test-orderId/payment-methods?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"test-orderId",
										"payment-methods"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "shopper-products",
					"item": [
						{
							"name": "SCAPI - Get products",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/product/shopper-products/v1/organizations/{{organizationId}}/products?ids=test-productId1,test-productId2&siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"product",
										"shopper-products",
										"v1",
										"organizations",
										"{{organizationId}}",
										"products"
									],
									"query": [
										{
											"key": "ids",
											"value": "test-productId1,test-productId2"
										},
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get product",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/product/shopper-products/v1/organizations/{{organizationId}}/products/test-productId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"product",
										"shopper-products",
										"v1",
										"organizations",
										"{{organizationId}}",
										"products",
										"test-productId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get categories",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/product/shopper-products/v1/organizations/{{organizationId}}/categories?ids=test-categoryId1,test-categoryId2&siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"product",
										"shopper-products",
										"v1",
										"organizations",
										"{{organizationId}}",
										"categories"
									],
									"query": [
										{
											"key": "ids",
											"value": "test-categoryId1,test-categoryId2"
										},
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get category",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/product/shopper-products/v1/organizations/{{organizationId}}/categories/test-categoryId?siteId={{ocapi_site}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"product",
										"shopper-products",
										"v1",
										"organizations",
										"{{organizationId}}",
										"categories",
										"test-categoryId"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "shopper-search",
					"item": [
						{
							"name": "SCAPI - Perform product search",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/search/shopper-search/v1/organizations/{{organizationId}}/product-search?siteId={{ocapi_site}}&q=shirt&refine=price=(0..100)&refine=c_refinementColor=green|red|blue&expand=(availability,prices)",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"search",
										"shopper-search",
										"v1",
										"organizations",
										"{{organizationId}}",
										"product-search"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										},
										{
											"key": "q",
											"value": "shirt"
										},
										{
											"key": "refine",
											"value": "price=(0..100)"
										},
										{
											"key": "refine",
											"value": "c_refinementColor=green|red|blue"
										},
										{
											"key": "expand",
											"value": "(availability,prices)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SCAPI - Get search suggestions",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST}}/search/shopper-search/v1/organizations/{{organizationId}}/search-suggestions?siteId={{ocapi_site}}&q=son",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"search",
										"shopper-search",
										"v1",
										"organizations",
										"{{organizationId}}",
										"search-suggestions"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{ocapi_site}}"
										},
										{
											"key": "q",
											"value": "son"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Salesforce Commerce APIs - end-to-end use cases and samples",
			"item": [
				{
					"name": "SCAPI End2End Shopper Journey",
					"item": [
						{
							"name": "Registered customer details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.globals.set(\"custOauthToken\", pm.response.headers.get(\"Authorization\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"credentials\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/customer/shopper-customers/v1/organizations/{{organizationId}}/customers/{{customerId}}?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"customer",
										"shopper-customers",
										"v1",
										"organizations",
										"{{organizationId}}",
										"customers",
										"{{customerId}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1b. Product Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{custOauthToken}}"
									}
								],
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/product/shopper-products/v1/organizations/{{organizationId}}/products?ids={{productId}}&siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"product",
										"shopper-products",
										"v1",
										"organizations",
										"{{organizationId}}",
										"products"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{productId}}"
										},
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1c. Product Search",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/search/shopper-search/v1/organizations/{{organizationId}}/product-search?q=hon&siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"search",
										"shopper-search",
										"v1",
										"organizations",
										"{{organizationId}}",
										"product-search"
									],
									"query": [
										{
											"key": "q",
											"value": "hon"
										},
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1c. Product Search Suggestions",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/search/shopper-search/v1/organizations/{{organizationId}}/search-suggestions?q=jac&siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"search",
										"shopper-search",
										"v1",
										"organizations",
										"{{organizationId}}",
										"search-suggestions"
									],
									"query": [
										{
											"key": "q",
											"value": "jac"
										},
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "1d. Promotion Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{custOauthToken}}"
									}
								],
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/pricing/shopper-promotions/v1/organizations/{{organizationId}}/promotions?ids={{promoId}}&siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"pricing",
										"shopper-promotions",
										"v1",
										"organizations",
										"{{organizationId}}",
										"promotions"
									],
									"query": [
										{
											"key": "ids",
											"value": "{{promoId}}"
										},
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2c. Create Basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set Basket Id\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.environment.set(\"basketId\", jsonData.basketId);\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "sandbox",
										"value": "{{sandbox}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n}"
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2c-1. Delete Baskets (if needed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"delete success\", function () {\r",
											"   pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "sandbox",
										"value": "{{sandbox}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2c-2. Get Basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"delete success\", function () {\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "sandbox",
										"value": "{{sandbox}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2d. Add Item To Basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set Product Item Id\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   pm.globals.set(\"newProductItem\", jsonData.productItems[0].itemId);\r",
											"   console.log(\"newProductItem: \"+jsonData.productItems[0].itemId);\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\n    \"productId\": \"{{productId}}\",\n    \"quantity\": 1\n}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}/items?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}",
										"items"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2d-1. Add Billing Address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set Billing address\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   console.log(\"DATA RETURNED: \" + jsonData);\r",
											"//    pm.globals.set(\"newProductItem\", jsonData.productItems[2].itemId);\r",
											"//    console.log(\"newProductItem: \"+jsonData.productItems[2].itemId);\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"Stephanie\",\n    \"lastName\": \"Miller\",\n    \"address1\": \"104 Presidential Way\",\n    \"city\": \"Woburn\",\n    \"postalCode\": \"01801\",\n    \"stateCode\": \"MA\",\n    \"countryCode\": \"US\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}/billing-address?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}",
										"billing-address"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2d-2. Add Customer Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Set Billing address\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   console.log(\"DATA RETURNED: \" + jsonData);\r",
											"//    pm.globals.set(\"newProductItem\", jsonData.productItems[2].itemId);\r",
											"//    console.log(\"newProductItem: \"+jsonData.productItems[2].itemId);\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"clavery@salesforce.com\"\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}/customer?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}",
										"customer"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2e. Update Shipment for Basket",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating shipment and shipping address\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   console.log(\"DATA RETURNED: \" + jsonData);\r",
											"//    pm.globals.set(\"newProductItem\", jsonData.productItems[2].itemId);\r",
											"//    console.log(\"newProductItem: \"+jsonData.productItems[2].itemId);\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"shippingAddress\": {\n    \"address1\": \"18911 marathon Rd\",\n    \"city\": \"Austin\",\n    \"countryCode\": \"US\",\n    \"firstName\": \"Terrance\",\n    \"lastName\": \"Grahn\",\n    \"postalCode\": \"78758\",\n    \"stateCode\": \"TX\"\n  },\n  \"shippingMethod\": {\n    \"id\": \"001\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}/shipments/me?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}",
										"shipments",
										"me"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "2f. Add Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Adding a payment\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"   console.log(\"DATA RETURNED: \" + jsonData);\r",
											"//    pm.globals.set(\"newProductItem\", jsonData.productItems[2].itemId);\r",
											"//    console.log(\"newProductItem: \"+jsonData.productItems[2].itemId);\r",
											"   pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n      \"paymentMethodId\": \"CREDIT_CARD\",\n      \"paymentCard\": {\n        \"cardType\": \"Visa\"\n      }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-baskets/v1/organizations/{{organizationId}}/baskets/{{basketId}}/payment-instruments?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-baskets",
										"v1",
										"organizations",
										"{{organizationId}}",
										"baskets",
										"{{basketId}}",
										"payment-instruments"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3a. CREATE ORDER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Creating ORDER\", function () {\r",
											"   var jsonData = pm.response.json();\r",
											"//    pm.globals.set(\"newProductItem\", jsonData.productItems[2].itemId);\r",
											"//    console.log(\"newProductItem: \"+jsonData.productItems[2].itemId);\r",
											"   pm.response.to.have.status(200);\r",
											"   pm.globals.set(\"orderNo\", jsonData.orderNo);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"basketId\": \"{{basketId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Orders",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{shortCode}}.api.commercecloud.salesforce.com/checkout/shopper-orders/v1/organizations/{{organizationId}}/orders/{{orderNo}}?siteId={{siteId}}",
									"protocol": "https",
									"host": [
										"{{shortCode}}",
										"api",
										"commercecloud",
										"salesforce",
										"com"
									],
									"path": [
										"checkout",
										"shopper-orders",
										"v1",
										"organizations",
										"{{organizationId}}",
										"orders",
										"{{orderNo}}"
									],
									"query": [
										{
											"key": "siteId",
											"value": "{{siteId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "# Shopper Login and API Access Service (SLAS) Use Case Scenarios Using Postman\n\nThe SCAPI end-to-end shopper journey utilizes selected API endpoint calls from different SCAPI domains. Goal is to show in a sample how those different endpoints can work together to form a typical shopper use case.\n\nThe collection connects to a commerce B2c trial environment to retrieve meaningful results as responses.\n\n**⚠️ Disclaimers:**\n\n- This collection is provided as-is. It's not officially supported by Salesforce or covered by SLAs.\n- API documentation is not provided with the collection. Please refer to the [official documentation](https://developer.commercecloud.com/s/api-details/a003k00000VzoEyAAJ/commerce-cloud-developer-centershopperloginandapiaccessadmin).\n    \n\nℹ️ Report issues and ask questions [here](https://github.com/forcedotcom/postman-commerce-cloud-apis/issues).\n\n## Get started\n\nFollow [this startup guide](https://github.com/forcedotcom/postman-commerce-cloud-apis) to get started with the collection."
				},
				{
					"name": "SLAS Use Cases - (wip)",
					"item": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PUBLIC_GUEST_CODE_VERIFIER",
			"value": ""
		},
		{
			"key": "PUBLIC_GUEST_CODE_CHALLENGE",
			"value": ""
		},
		{
			"key": "ECOM_USER_CODE_VERIFIER",
			"value": ""
		},
		{
			"key": "ECOM_USER_CODE_CHALLENGE",
			"value": ""
		},
		{
			"key": "PUBLIC_ECOM_CODE_CHALLENGE",
			"value": ""
		},
		{
			"key": "PUBLIC_ECOM_CODE_VERIFIER",
			"value": ""
		},
		{
			"key": "shortCode",
			"value": ""
		},
		{
			"key": "tenant",
			"value": ""
		},
		{
			"key": "organizationId",
			"value": "f_ecom_{{tenant}}"
		},
		{
			"key": "HOST",
			"value": "https://{{shortCode}}.api.commercecloud.salesforce.com"
		},
		{
			"key": "public_client_id",
			"value": ""
		},
		{
			"key": "redirect_url",
			"value": ""
		},
		{
			"key": "private_client_id",
			"value": ""
		},
		{
			"key": "CUSTOMER_EMAIL",
			"value": ""
		},
		{
			"key": "PI_ID",
			"value": ""
		},
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "admin_cient_id",
			"value": ""
		},
		{
			"key": "admin_client_secret",
			"value": ""
		},
		{
			"key": "auth_code",
			"value": ""
		},
		{
			"key": "basket_id",
			"value": ""
		},
		{
			"key": "callback_url",
			"value": ""
		},
		{
			"key": "category_id",
			"value": "mens"
		},
		{
			"key": "customer_id",
			"value": ""
		},
		{
			"key": "csrf",
			"value": ""
		},
		{
			"key": "dwsid",
			"value": ""
		},
		{
			"key": "ecom_customer_pw",
			"value": ""
		},
		{
			"key": "ecom_customer_login",
			"value": ""
		},
		{
			"key": "locale",
			"value": "en_US"
		},
		{
			"key": "product_id",
			"value": "750518699592M"
		},
		{
			"key": "siteId",
			"value": "RefArch"
		},
		{
			"key": "ocapi_uri",
			"value": "https://<instance>-<realm>-<customer>.demandware.net or On-Demand Sandbox URI, like https://zzte-053.dx.commercecloud.salesforce.com"
		},
		{
			"key": "order_no",
			"value": ""
		},
		{
			"key": "page_id",
			"value": "homepage-example"
		},
		{
			"key": "private_client_secret",
			"value": ""
		},
		{
			"key": "refresh_token",
			"value": ""
		},
		{
			"key": "storefront_pw",
			"value": ""
		},
		{
			"key": "tenantContact",
			"value": "Postman API"
		},
		{
			"key": "tenantEmail",
			"value": "admin@salesforce.com"
		},
		{
			"key": "tenantMerchantName",
			"value": "Salesforce"
		},
		{
			"key": "usid",
			"value": ""
		},
		{
			"key": "version",
			"value": "v1"
		},
		{
			"key": "AUTHORIZATION",
			"value": ""
		},
		{
			"key": "guest_private_refresh_token",
			"value": ""
		},
		{
			"key": "b2c_private_refresh_token",
			"value": ""
		},
		{
			"key": "guest_public_refresh_token",
			"value": ""
		}
	]
}